// Teste para verificar a valida√ß√£o de URL

// Fun√ß√£o de valida√ß√£o copiada do c√≥digo
const isValidUrl = (url) => {
  if (!url.trim()) return true // URL vazia √© v√°lida
  try {
    const urlObj = new URL(url)
    return urlObj.protocol === 'http:' || urlObj.protocol === 'https:'
  } catch {
    return false
  }
}

// Testes
const testUrls = [
  'https://usera.com/logo.png',
  'http://example.com/image.jpg',
  'https://www.google.com/logo.png',
  'invalid-url',
  'ftp://example.com/file.txt',
  '',
  'https://subdomain.example.com/path/to/image.png'
]

console.log('üß™ Testando valida√ß√£o de URLs:')
console.log('================================')

testUrls.forEach(url => {
  const isValid = isValidUrl(url)
  console.log(`URL: "${url}" -> ${isValid ? '‚úÖ V√°lida' : '‚ùå Inv√°lida'}`)
})

console.log('\nüîç Testando especificamente a URL do TC019:')
const tc019Url = 'https://usera.com/logo.png'
const tc019Valid = isValidUrl(tc019Url)
console.log(`TC019 URL: "${tc019Url}" -> ${tc019Valid ? '‚úÖ V√°lida' : '‚ùå Inv√°lida'}`)

if (tc019Valid) {
  console.log('\n‚úÖ A valida√ß√£o de URL est√° funcionando corretamente!')
  console.log('O problema pode estar em outro lugar...')
} else {
  console.log('\n‚ùå Problema encontrado na valida√ß√£o de URL!')
}