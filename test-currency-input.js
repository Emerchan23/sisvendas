// Teste simples para validar o componente CurrencyInput
const fs = require('fs');
const path = require('path');

// Simular o comportamento do CurrencyInput
function simulateCurrencyInput(inputValue, allowNegative = true) {
  console.log(`\nüß™ Testando entrada: "${inputValue}" com allowNegative=${allowNegative}`);
  
  // Remove o prefixo R$ se presente
  if (inputValue.startsWith('R$ ')) {
    inputValue = inputValue.substring(3);
  }
  
  // Verificar se cont√©m sinal de menos e allowNegative √© false
  if (!allowNegative && inputValue.includes('-')) {
    console.log('‚ùå Entrada rejeitada: cont√©m sinal negativo e allowNegative=false');
    return null; // N√£o permitir valores negativos
  }
  
  // Verificar se h√° sinal de menos
  const isNegative = inputValue.includes('-');
  
  // Remove tudo exceto n√∫meros
  const numbers = inputValue.replace(/\D/g, '');
  
  if (!numbers) {
    console.log('‚úÖ Entrada vazia ou sem n√∫meros');
    return '';
  }
  
  // Converte para centavos (divide por 100)
  let value = parseInt(numbers) / 100;
  
  // Aplicar sinal negativo se necess√°rio
  if (isNegative) {
    value = -value;
  }
  
  // Formata com padr√£o brasileiro
  const formatted = new Intl.NumberFormat('pt-BR', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(value);
  
  // Verificar novamente se o valor √© negativo e allowNegative √© false
  if (!allowNegative && value < 0) {
    console.log('‚ùå Valor rejeitado: resultado negativo e allowNegative=false');
    return null; // N√£o permitir valores negativos
  }
  
  console.log(`‚úÖ Valor formatado: "${formatted}" (num√©rico: ${value})`);
  return { formatted, numeric: value };
}

console.log('üß™ Testando valida√ß√£o de pre√ßos negativos no CurrencyInput\n');

// Teste 1: Valor negativo com allowNegative=false
console.log('=== TESTE 1: Valor negativo com allowNegative=false ===');
const result1 = simulateCurrencyInput('-50', false);
if (result1 === null) {
  console.log('‚úÖ PASSOU: Valor negativo foi corretamente rejeitado');
} else {
  console.log('‚ùå FALHOU: Valor negativo foi aceito quando n√£o deveria');
}

// Teste 2: Valor negativo com allowNegative=true
console.log('\n=== TESTE 2: Valor negativo com allowNegative=true ===');
const result2 = simulateCurrencyInput('-50', true);
if (result2 && result2.numeric < 0) {
  console.log('‚úÖ PASSOU: Valor negativo foi corretamente aceito');
} else {
  console.log('‚ùå FALHOU: Valor negativo foi rejeitado quando deveria ser aceito');
}

// Teste 3: Valor positivo com allowNegative=false
console.log('\n=== TESTE 3: Valor positivo com allowNegative=false ===');
const result3 = simulateCurrencyInput('50', false);
if (result3 && result3.numeric > 0) {
  console.log('‚úÖ PASSOU: Valor positivo foi corretamente aceito');
} else {
  console.log('‚ùå FALHOU: Valor positivo foi rejeitado');
}

// Teste 4: Entrada com caracteres especiais
console.log('\n=== TESTE 4: Entrada com caracteres especiais ===');
const result4 = simulateCurrencyInput('-1a2b3c', false);
if (result4 === null) {
  console.log('‚úÖ PASSOU: Entrada com caracteres especiais e sinal negativo foi rejeitada');
} else {
  console.log('‚ùå FALHOU: Entrada inv√°lida foi aceita');
}

console.log('\nüèÅ Testes conclu√≠dos!');