// Teste para interceptar e analisar o payload enviado para a API
// Execute no console do navegador na p√°gina de or√ßamentos

console.log('üîç INICIANDO TESTE DE PAYLOAD DA API');

// Interceptar todas as requisi√ß√µes fetch
const originalFetch = window.fetch;
window.fetch = function(...args) {
  const [url, options] = args;
  
  // Interceptar apenas requisi√ß√µes para or√ßamentos
  if (url && (url.includes('/api/orcamentos') || url.toString().includes('/api/orcamentos'))) {
    console.log('üåê REQUISI√á√ÉO INTERCEPTADA:');
    console.log('üìç URL:', url);
    console.log('‚öôÔ∏è Method:', options?.method || 'GET');
    
    if (options && options.body) {
      try {
        const bodyData = JSON.parse(options.body);
        console.log('üì¶ PAYLOAD COMPLETO:');
        console.log(JSON.stringify(bodyData, null, 2));
        
        if (bodyData.itens && bodyData.itens.length > 0) {
          console.log('\nüìã AN√ÅLISE DOS ITENS:');
          bodyData.itens.forEach((item, index) => {
            console.log(`\nüì¶ Item ${index + 1}:`);
            console.log(`  üìù Descri√ß√£o: ${item.descricao}`);
            console.log(`  üí∞ Valor unit√°rio: ${item.valor_unitario}`);
            console.log(`  üîó Link ref: ${item.link_ref}`);
            console.log(`  üíµ Custo ref: ${item.custo_ref}`);
            
            // Verificar se os campos cr√≠ticos est√£o presentes
            const problemas = [];
            if (item.valor_unitario === undefined || item.valor_unitario === null) {
              problemas.push('‚ùå valor_unitario est√° undefined/null');
            }
            if (item.link_ref === undefined) {
              problemas.push('‚ùå link_ref est√° undefined');
            }
            if (item.custo_ref === undefined) {
              problemas.push('‚ùå custo_ref est√° undefined');
            }
            
            if (problemas.length > 0) {
              console.log('  üö® PROBLEMAS ENCONTRADOS:');
              problemas.forEach(problema => console.log(`    ${problema}`));
            } else {
              console.log('  ‚úÖ Todos os campos est√£o presentes');
            }
          });
        }
      } catch (e) {
        console.log('‚ùå Erro ao parsear body:', e);
        console.log('üìÑ Body raw:', options.body);
      }
    }
  }
  
  // Chamar o fetch original e interceptar a resposta
  return originalFetch.apply(this, args).then(response => {
    if (url && (url.includes('/api/orcamentos') || url.toString().includes('/api/orcamentos'))) {
      console.log('\nüì• RESPOSTA DA API:');
      console.log('üìä Status:', response.status);
      console.log('‚úÖ OK:', response.ok);
      
      // Clonar a resposta para poder ler o body sem consumir o original
      const clonedResponse = response.clone();
      clonedResponse.json().then(data => {
        console.log('üìã Dados da resposta:');
        console.log(JSON.stringify(data, null, 2));
        
        if (data.itens && data.itens.length > 0) {
          console.log('\nüîç VERIFICA√á√ÉO DOS DADOS SALVOS:');
          data.itens.forEach((item, index) => {
            console.log(`\nüì¶ Item ${index + 1} salvo:`);
            console.log(`  üìù Descri√ß√£o: ${item.descricao}`);
            console.log(`  üí∞ Valor unit√°rio: ${item.valor_unitario}`);
            console.log(`  üîó Link ref: ${item.link_ref}`);
            console.log(`  üíµ Custo ref: ${item.custo_ref}`);
          });
        }
      }).catch(e => {
        console.log('‚ùå Erro ao ler resposta JSON:', e);
      });
    }
    
    return response;
  });
};

// Fun√ß√£o para testar o salvamento
function testarSalvamento() {
  console.log('\nüß™ INICIANDO TESTE DE SALVAMENTO');
  console.log('üìù Instru√ß√µes:');
  console.log('1. Preencha um or√ßamento com pelo menos 1 item');
  console.log('2. Preencha o valor unit√°rio (ex: 100,50)');
  console.log('3. Abra os "Detalhes internos" do item');
  console.log('4. Preencha o Link ref (ex: https://exemplo.com)');
  console.log('5. Preencha o Custo ref (ex: 75,25)');
  console.log('6. Clique em "Salvar Or√ßamento"');
  console.log('7. Observe os logs abaixo para ver o que est√° sendo enviado');
  console.log('\nüîç Aguardando a√ß√£o do usu√°rio...');
}

// Executar o teste
testarSalvamento();

console.log('\n‚úÖ INTERCEPTADOR DE REQUISI√á√ïES ATIVO');
console.log('üí° Agora fa√ßa o teste manual e observe os logs!');