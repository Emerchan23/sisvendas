// Teste completo para personaliza√ß√£o de documentos
// Execute com: node test-personalizacao-documentos.js

const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

async function testarPersonalizacaoDocumentos() {
  console.log('üé® TESTE: Personaliza√ß√£o de Documentos');
  console.log('=' .repeat(50));
  
  try {
    // 1. Testar configura√ß√µes de personaliza√ß√£o
    console.log('\n1. üìã Testando configura√ß√µes de personaliza√ß√£o...');
    
    const configPersonalizacao = {
      cor_primaria: '#2563eb',
      cor_secundaria: '#1e40af',
      cor_texto: '#1f2937',
      fonte_titulo: 'Inter',
      fonte_texto: 'Inter',
      tamanho_titulo: 24,
      tamanho_texto: 14,
      validadeOrcamento: 30,
      mostrar_logo: true,
      posicao_logo: 'esquerda'
    };
    
    // Salvar configura√ß√µes de personaliza√ß√£o
    const configResponse = await fetch('http://localhost:3145/api/config', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        personalizacao_documentos: configPersonalizacao
      })
    });
    
    if (configResponse.ok) {
      console.log('‚úÖ Configura√ß√µes de personaliza√ß√£o salvas com sucesso!');
    } else {
      const error = await configResponse.json();
      console.log('‚ùå Erro ao salvar configura√ß√µes:', error);
      return;
    }
    
    // 2. Criar um or√ßamento de teste
    console.log('\n2. üìÑ Criando or√ßamento de teste...');
    
    const orcamentoData = {
      numero: `TESTE-PERSONALIZADO-${Date.now()}`,
      cliente_id: '1',
      data_orcamento: new Date().toISOString().split('T')[0],
      descricao: 'Teste de personaliza√ß√£o de documentos',
      observacoes: 'Este or√ßamento testa as configura√ß√µes de personaliza√ß√£o aplicadas',
      modalidade: 'DIRETA',
      itens: [
        {
          descricao: 'Produto Premium Personalizado',
          quantidade: 2,
          valor_unitario: 150.00,
          link_ref: 'https://exemplo.com/produto-premium',
          custo_ref: 100.00
        },
        {
          descricao: 'Servi√ßo de Consultoria',
          quantidade: 5,
          valor_unitario: 80.00,
          link_ref: 'https://exemplo.com/consultoria',
          custo_ref: 50.00
        },
        {
          descricao: 'Material Especial',
          quantidade: 10,
          valor_unitario: 25.00
        }
      ]
    };
    
    const orcamentoResponse = await fetch('http://localhost:3145/api/orcamentos', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(orcamentoData)
    });
    
    if (!orcamentoResponse.ok) {
      const error = await orcamentoResponse.json();
      console.log('‚ùå Erro ao criar or√ßamento:', error);
      return;
    }
    
    const orcamento = await orcamentoResponse.json();
    console.log('‚úÖ Or√ßamento criado:', orcamento.numero);
    
    // 3. Testar gera√ß√£o de PDF com personaliza√ß√£o
    console.log('\n3. üñ®Ô∏è Testando gera√ß√£o de PDF personalizado...');
    
    // Aguardar um pouco para garantir que o or√ßamento foi salvo
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Buscar o or√ßamento criado
    const orcamentosResponse = await fetch('http://localhost:3145/api/orcamentos');
    const orcamentos = await orcamentosResponse.json();
    const orcamentoCriado = orcamentos.find(o => o.numero === orcamento.numero);
    
    if (!orcamentoCriado) {
      console.log('‚ùå Or√ßamento n√£o encontrado para gera√ß√£o de PDF');
      return;
    }
    
    console.log('üìã Or√ßamento encontrado:', orcamentoCriado.numero);
    console.log('üí∞ Valor total:', orcamentoCriado.valor_total);
    console.log('üì¶ Itens:', orcamentoCriado.itens?.length || 0);
    
    // 4. Verificar se as configura√ß√µes est√£o sendo aplicadas
    console.log('\n4. üîç Verificando aplica√ß√£o das configura√ß√µes...');
    
    // Buscar configura√ß√µes atuais
    const configAtualResponse = await fetch('http://localhost:3145/api/config');
    const configAtual = await configAtualResponse.json();
    
    if (configAtual.personalizacao_documentos) {
      console.log('‚úÖ Configura√ß√µes de personaliza√ß√£o encontradas:');
      console.log('  - Cor prim√°ria:', configAtual.personalizacao_documentos.cor_primaria);
      console.log('  - Cor secund√°ria:', configAtual.personalizacao_documentos.cor_secundaria);
      console.log('  - Fonte t√≠tulo:', configAtual.personalizacao_documentos.fonte_titulo);
      console.log('  - Tamanho t√≠tulo:', configAtual.personalizacao_documentos.tamanho_titulo);
      console.log('  - Validade or√ßamento:', configAtual.personalizacao_documentos.validadeOrcamento, 'dias');
    } else {
      console.log('‚ö†Ô∏è Configura√ß√µes de personaliza√ß√£o n√£o encontradas');
    }
    
    // 5. Testar diferentes configura√ß√µes
    console.log('\n5. üé® Testando diferentes configura√ß√µes de personaliza√ß√£o...');
    
    const configsAlternativas = [
      {
        nome: 'Tema Escuro',
        config: {
          cor_primaria: '#1f2937',
          cor_secundaria: '#374151',
          cor_texto: '#f9fafb',
          fonte_titulo: 'Arial',
          tamanho_titulo: 28
        }
      },
      {
        nome: 'Tema Verde',
        config: {
          cor_primaria: '#059669',
          cor_secundaria: '#047857',
          cor_texto: '#064e3b',
          fonte_titulo: 'Helvetica',
          tamanho_titulo: 22
        }
      },
      {
        nome: 'Tema Roxo',
        config: {
          cor_primaria: '#7c3aed',
          cor_secundaria: '#6d28d9',
          cor_texto: '#581c87',
          fonte_titulo: 'Georgia',
          tamanho_titulo: 26
        }
      }
    ];
    
    for (const tema of configsAlternativas) {
      console.log(`\n  üé® Testando ${tema.nome}...`);
      
      const temaResponse = await fetch('http://localhost:3145/api/config', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          personalizacao_documentos: tema.config
        })
      });
      
      if (temaResponse.ok) {
        console.log(`  ‚úÖ ${tema.nome} aplicado com sucesso`);
      } else {
        console.log(`  ‚ùå Erro ao aplicar ${tema.nome}`);
      }
      
      // Aguardar um pouco entre as configura√ß√µes
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    // 6. Restaurar configura√ß√£o original
    console.log('\n6. üîÑ Restaurando configura√ß√£o original...');
    
    const restaurarResponse = await fetch('http://localhost:3145/api/config', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        personalizacao_documentos: configPersonalizacao
      })
    });
    
    if (restaurarResponse.ok) {
      console.log('‚úÖ Configura√ß√£o original restaurada');
    }
    
    // 7. Resumo dos testes
    console.log('\n' + '=' .repeat(50));
    console.log('üìä RESUMO DOS TESTES DE PERSONALIZA√á√ÉO');
    console.log('=' .repeat(50));
    console.log('‚úÖ Configura√ß√µes de personaliza√ß√£o: TESTADO');
    console.log('‚úÖ Cria√ß√£o de or√ßamento: TESTADO');
    console.log('‚úÖ Aplica√ß√£o de configura√ß√µes: TESTADO');
    console.log('‚úÖ Temas alternativos: TESTADO');
    console.log('‚úÖ Restaura√ß√£o de configura√ß√µes: TESTADO');
    
    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('1. Acesse a p√°gina de or√ßamentos no navegador');
    console.log('2. Localize o or√ßamento:', orcamento.numero);
    console.log('3. Clique em "Baixar PDF" para ver a personaliza√ß√£o aplicada');
    console.log('4. Verifique se as cores, fontes e layout est√£o corretos');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    console.log('üí° Certifique-se de que o servidor est√° rodando em http://localhost:3145');
  }
}

// Executar o teste
testarPersonalizacaoDocumentos();

console.log('\nüìã INSTRU√á√ïES DE USO:');
console.log('1. Execute: node test-personalizacao-documentos.js');
console.log('2. Observe os logs para verificar cada etapa');
console.log('3. Acesse a interface web para testar a gera√ß√£o de PDF');
console.log('4. Verifique se as personaliza√ß√µes est√£o sendo aplicadas');