// Teste espec√≠fico para gera√ß√£o de PDF com personaliza√ß√£o
// Execute com: node test-pdf-personalizacao.js

const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

async function testarGeracaoPDFPersonalizado() {
  console.log('üé® TESTE: Gera√ß√£o de PDF com Personaliza√ß√£o');
  console.log('=' .repeat(60));
  
  try {
    // 1. Configurar personaliza√ß√£o espec√≠fica para teste
    console.log('\n1. üé® Configurando personaliza√ß√£o para teste...');
    
    const configTeste = {
      cor_primaria: '#dc2626', // Vermelho
      cor_secundaria: '#b91c1c',
      cor_texto: '#1f2937',
      fonte_titulo: 'Inter',
      fonte_texto: 'Inter',
      tamanho_titulo: 26,
      tamanho_texto: 14,
      validadeOrcamento: 45,
      mostrar_logo: true,
      posicao_logo: 'centro'
    };
    
    const configResponse = await fetch('http://localhost:3145/api/config', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        personalizacao_documentos: configTeste
      })
    });
    
    if (configResponse.ok) {
      console.log('‚úÖ Configura√ß√£o de teste aplicada (tema vermelho)');
    } else {
      console.log('‚ùå Erro ao aplicar configura√ß√£o de teste');
      return;
    }
    
    // 2. Buscar or√ßamentos existentes
    console.log('\n2. üìã Buscando or√ßamentos existentes...');
    
    const orcamentosResponse = await fetch('http://localhost:3145/api/orcamentos');
    const orcamentos = await orcamentosResponse.json();
    
    console.log(`üìä Total de or√ßamentos encontrados: ${orcamentos.length}`);
    
    if (orcamentos.length === 0) {
      console.log('‚ö†Ô∏è Nenhum or√ßamento encontrado. Criando um novo...');
      
      // Criar or√ßamento de teste
      const novoOrcamento = {
        numero: `PDF-TEST-${Date.now()}`,
        cliente_id: '1',
        data_orcamento: new Date().toISOString().split('T')[0],
        descricao: 'Teste de gera√ß√£o de PDF personalizado',
        observacoes: 'Este or√ßamento testa a aplica√ß√£o de personaliza√ß√£o no PDF gerado',
        modalidade: 'DIRETA',
        itens: [
          {
            descricao: 'Produto A - Teste PDF',
            quantidade: 3,
            valor_unitario: 120.00
          },
          {
            descricao: 'Servi√ßo B - Teste PDF',
            quantidade: 2,
            valor_unitario: 200.00
          }
        ]
      };
      
      const criarResponse = await fetch('http://localhost:3145/api/orcamentos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(novoOrcamento)
      });
      
      if (criarResponse.ok) {
        const orcamentoCriado = await criarResponse.json();
        console.log('‚úÖ Or√ßamento criado:', orcamentoCriado.numero);
        orcamentos.push(orcamentoCriado);
      } else {
        console.log('‚ùå Erro ao criar or√ßamento de teste');
        return;
      }
    }
    
    // 3. Selecionar or√ßamento para teste
    const orcamentoTeste = orcamentos[0];
    console.log(`\n3. üìÑ Testando com or√ßamento: ${orcamentoTeste.numero}`);
    console.log(`   üí∞ Valor: R$ ${orcamentoTeste.valor_total}`);
    console.log(`   üìÖ Data: ${orcamentoTeste.data_orcamento}`);
    
    // 4. Verificar configura√ß√µes atuais
    console.log('\n4. üîç Verificando configura√ß√µes aplicadas...');
    
    const configAtualResponse = await fetch('http://localhost:3145/api/config');
    const configAtual = await configAtualResponse.json();
    
    if (configAtual.personalizacao_documentos) {
      const config = configAtual.personalizacao_documentos;
      console.log('‚úÖ Configura√ß√µes encontradas:');
      console.log(`   üé® Cor prim√°ria: ${config.cor_primaria}`);
      console.log(`   üé® Cor secund√°ria: ${config.cor_secundaria}`);
      console.log(`   üìù Fonte t√≠tulo: ${config.fonte_titulo}`);
      console.log(`   üìè Tamanho t√≠tulo: ${config.tamanho_titulo}px`);
      console.log(`   ‚è∞ Validade: ${config.validadeOrcamento} dias`);
      console.log(`   üñºÔ∏è Mostrar logo: ${config.mostrar_logo ? 'Sim' : 'N√£o'}`);
    } else {
      console.log('‚ö†Ô∏è Configura√ß√µes de personaliza√ß√£o n√£o encontradas');
    }
    
    // 5. Testar fun√ß√£o makeOrcamentoHTML diretamente
    console.log('\n5. üß™ Testando fun√ß√£o makeOrcamentoHTML...');
    
    try {
      // Importar a fun√ß√£o de gera√ß√£o de HTML
      const printModule = require('./lib/print.js');
      
      if (printModule.makeOrcamentoHTML) {
        console.log('‚úÖ Fun√ß√£o makeOrcamentoHTML encontrada');
        
        // Testar gera√ß√£o de HTML
        const htmlGerado = await printModule.makeOrcamentoHTML(orcamentoTeste.id);
        
        if (htmlGerado) {
          console.log('‚úÖ HTML gerado com sucesso');
          console.log(`üìè Tamanho do HTML: ${htmlGerado.length} caracteres`);
          
          // Verificar se cont√©m as personaliza√ß√µes
          const contemCores = htmlGerado.includes(configTeste.cor_primaria);
          const contemFonte = htmlGerado.includes(configTeste.fonte_titulo);
          
          console.log(`üé® Cont√©m cor prim√°ria (${configTeste.cor_primaria}): ${contemCores ? '‚úÖ' : '‚ùå'}`);
          console.log(`üìù Cont√©m fonte t√≠tulo (${configTeste.fonte_titulo}): ${contemFonte ? '‚úÖ' : '‚ùå'}`);
          
          // Salvar HTML para inspe√ß√£o
          const htmlPath = path.join(__dirname, 'test-output-personalizado.html');
          fs.writeFileSync(htmlPath, htmlGerado);
          console.log(`üíæ HTML salvo em: ${htmlPath}`);
          
        } else {
          console.log('‚ùå Falha na gera√ß√£o de HTML');
        }
        
      } else {
        console.log('‚ùå Fun√ß√£o makeOrcamentoHTML n√£o encontrada');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao testar fun√ß√£o diretamente:', error.message);
      console.log('üí° Isso pode ser normal se houver depend√™ncias do banco de dados');
    }
    
    // 6. Testar diferentes configura√ß√µes de personaliza√ß√£o
    console.log('\n6. üé® Testando varia√ß√µes de personaliza√ß√£o...');
    
    const variacoes = [
      {
        nome: 'Azul Corporativo',
        config: {
          cor_primaria: '#1e40af',
          cor_secundaria: '#1d4ed8',
          fonte_titulo: 'Arial',
          tamanho_titulo: 24
        }
      },
      {
        nome: 'Verde Sustent√°vel',
        config: {
          cor_primaria: '#059669',
          cor_secundaria: '#047857',
          fonte_titulo: 'Helvetica',
          tamanho_titulo: 28
        }
      },
      {
        nome: 'Roxo Criativo',
        config: {
          cor_primaria: '#7c3aed',
          cor_secundaria: '#6d28d9',
          fonte_titulo: 'Georgia',
          tamanho_titulo: 22
        }
      }
    ];
    
    for (const variacao of variacoes) {
      console.log(`\n   üé® Aplicando ${variacao.nome}...`);
      
      const variacaoResponse = await fetch('http://localhost:3145/api/config', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          personalizacao_documentos: {
            ...configTeste,
            ...variacao.config
          }
        })
      });
      
      if (variacaoResponse.ok) {
        console.log(`   ‚úÖ ${variacao.nome} aplicado`);
        
        // Verificar se a configura√ß√£o foi salva
        const verificarResponse = await fetch('http://localhost:3145/api/config');
        const configVerificar = await verificarResponse.json();
        
        if (configVerificar.personalizacao_documentos?.cor_primaria === variacao.config.cor_primaria) {
          console.log(`   ‚úÖ Configura√ß√£o confirmada: ${variacao.config.cor_primaria}`);
        } else {
          console.log(`   ‚ö†Ô∏è Configura√ß√£o n√£o confirmada`);
        }
        
      } else {
        console.log(`   ‚ùå Erro ao aplicar ${variacao.nome}`);
      }
      
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    // 7. Resumo final
    console.log('\n' + '=' .repeat(60));
    console.log('üìä RESUMO DO TESTE DE PDF PERSONALIZADO');
    console.log('=' .repeat(60));
    console.log('‚úÖ Configura√ß√£o de personaliza√ß√£o: TESTADO');
    console.log('‚úÖ Busca de or√ßamentos: TESTADO');
    console.log('‚úÖ Verifica√ß√£o de configura√ß√µes: TESTADO');
    console.log('‚úÖ Varia√ß√µes de personaliza√ß√£o: TESTADO');
    
    console.log('\nüéØ INSTRU√á√ïES PARA TESTE VISUAL:');
    console.log('1. Acesse: http://localhost:3145');
    console.log('2. V√° para a p√°gina de Or√ßamentos');
    console.log(`3. Localize o or√ßamento: ${orcamentoTeste.numero}`);
    console.log('4. Clique em "Baixar PDF" ou "Visualizar"');
    console.log('5. Verifique se as cores e fontes est√£o aplicadas');
    console.log('6. Teste diferentes configura√ß√µes na p√°gina de Configura√ß√µes');
    
    console.log('\nüìã VERIFICA√á√ïES MANUAIS NECESS√ÅRIAS:');
    console.log('‚Ä¢ PDF gerado cont√©m as cores personalizadas');
    console.log('‚Ä¢ Fontes est√£o sendo aplicadas corretamente');
    console.log('‚Ä¢ Layout est√° respeitando as configura√ß√µes');
    console.log('‚Ä¢ Logo est√° na posi√ß√£o configurada (se aplic√°vel)');
    console.log('‚Ä¢ Validade do or√ßamento est√° correta');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    console.log('üí° Certifique-se de que o servidor est√° rodando em http://localhost:3145');
  }
}

// Executar o teste
testarGeracaoPDFPersonalizado();