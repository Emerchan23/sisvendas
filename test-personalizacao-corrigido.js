// Teste corrigido para personaliza√ß√£o de documentos
// Execute com: node test-personalizacao-corrigido.js

const fetch = require('node-fetch');

async function testarPersonalizacaoCorrigida() {
  console.log('üé® TESTE CORRIGIDO: Personaliza√ß√£o de Documentos');
  console.log('=' .repeat(60));
  
  try {
    // 1. Verificar configura√ß√£o atual
    console.log('\n1. üîç Verificando configura√ß√£o atual...');
    
    const configAtualResponse = await fetch('http://localhost:3145/api/config');
    const configAtual = await configAtualResponse.json();
    
    console.log('üìã Configura√ß√£o atual encontrada:');
    console.log('  - Nome:', configAtual.nome);
    console.log('  - ID:', configAtual.id);
    console.log('  - Cor prim√°ria atual:', configAtual.cor_primaria || 'N√£o definida');
    console.log('  - Fonte t√≠tulo atual:', configAtual.fonte_titulo || 'N√£o definida');
    
    // 2. Aplicar configura√ß√µes de personaliza√ß√£o usando nomes corretos
    console.log('\n2. üé® Aplicando configura√ß√µes de personaliza√ß√£o...');
    
    const configPersonalizacao = {
      corPrimaria: '#dc2626',      // Campo correto: corPrimaria -> cor_primaria
      corSecundaria: '#b91c1c',    // Campo correto: corSecundaria -> cor_secundaria
      corTexto: '#1f2937',         // Campo correto: corTexto -> cor_texto
      fonteTitulo: 'Inter',        // Campo correto: fonteTitulo -> fonte_titulo
      fonteTexto: 'Inter',         // Campo correto: fonteTexto -> fonte_texto
      tamanhoTitulo: 26,           // Campo correto: tamanhoTitulo -> tamanho_titulo
      tamanhoTexto: 14,            // Campo correto: tamanhoTexto -> tamanho_texto
      validadeOrcamento: 45        // Campo correto: validadeOrcamento -> validade_orcamento
    };
    
    console.log('üì§ Enviando configura√ß√µes:', JSON.stringify(configPersonalizacao, null, 2));
    
    const salvarResponse = await fetch('http://localhost:3145/api/config', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(configPersonalizacao)
    });
    
    const resultadoSalvar = await salvarResponse.json();
    console.log('üì• Resposta do servidor:', JSON.stringify(resultadoSalvar, null, 2));
    
    if (salvarResponse.ok) {
      console.log('‚úÖ Configura√ß√µes salvas com sucesso!');
    } else {
      console.log('‚ùå Erro ao salvar configura√ß√µes:', resultadoSalvar.error);
      return;
    }
    
    // 3. Verificar se as configura√ß√µes foram salvas
    console.log('\n3. ‚úÖ Verificando configura√ß√µes salvas...');
    
    const verificarResponse = await fetch('http://localhost:3145/api/config');
    const configVerificada = await verificarResponse.json();
    
    console.log('üîç Configura√ß√µes verificadas:');
    console.log('  - Cor prim√°ria:', configVerificada.cor_primaria);
    console.log('  - Cor secund√°ria:', configVerificada.cor_secundaria);
    console.log('  - Cor texto:', configVerificada.cor_texto);
    console.log('  - Fonte t√≠tulo:', configVerificada.fonte_titulo);
    console.log('  - Fonte texto:', configVerificada.fonte_texto);
    console.log('  - Tamanho t√≠tulo:', configVerificada.tamanho_titulo);
    console.log('  - Tamanho texto:', configVerificada.tamanho_texto);
    console.log('  - Validade or√ßamento:', configVerificada.validade_orcamento);
    
    // Verificar se os valores foram salvos corretamente
    const verificacoes = [
      { campo: 'cor_primaria', esperado: '#dc2626', atual: configVerificada.cor_primaria },
      { campo: 'cor_secundaria', esperado: '#b91c1c', atual: configVerificada.cor_secundaria },
      { campo: 'fonte_titulo', esperado: 'Inter', atual: configVerificada.fonte_titulo },
      { campo: 'tamanho_titulo', esperado: 26, atual: configVerificada.tamanho_titulo },
      { campo: 'validade_orcamento', esperado: 45, atual: configVerificada.validade_orcamento }
    ];
    
    console.log('\nüìä Verifica√ß√£o de campos:');
    let todasCorretas = true;
    
    for (const verificacao of verificacoes) {
      const correto = verificacao.atual == verificacao.esperado;
      console.log(`  ${correto ? '‚úÖ' : '‚ùå'} ${verificacao.campo}: ${verificacao.atual} ${correto ? '(correto)' : `(esperado: ${verificacao.esperado})`}`);
      if (!correto) todasCorretas = false;
    }
    
    if (todasCorretas) {
      console.log('\nüéâ Todas as configura√ß√µes foram salvas corretamente!');
    } else {
      console.log('\n‚ö†Ô∏è Algumas configura√ß√µes n√£o foram salvas corretamente.');
    }
    
    // 4. Testar diferentes temas
    console.log('\n4. üé® Testando diferentes temas...');
    
    const temas = [
      {
        nome: 'Azul Profissional',
        config: {
          corPrimaria: '#1e40af',
          corSecundaria: '#1d4ed8',
          fonteTitulo: 'Arial',
          tamanhoTitulo: 24
        }
      },
      {
        nome: 'Verde Natureza',
        config: {
          corPrimaria: '#059669',
          corSecundaria: '#047857',
          fonteTitulo: 'Helvetica',
          tamanhoTitulo: 28
        }
      },
      {
        nome: 'Roxo Criativo',
        config: {
          corPrimaria: '#7c3aed',
          corSecundaria: '#6d28d9',
          fonteTitulo: 'Georgia',
          tamanhoTitulo: 22
        }
      }
    ];
    
    for (const tema of temas) {
      console.log(`\n  üé® Aplicando tema: ${tema.nome}`);
      
      const temaResponse = await fetch('http://localhost:3145/api/config', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(tema.config)
      });
      
      if (temaResponse.ok) {
        console.log(`  ‚úÖ ${tema.nome} aplicado com sucesso`);
        
        // Verificar se foi aplicado
        const verificarTemaResponse = await fetch('http://localhost:3145/api/config');
        const configTema = await verificarTemaResponse.json();
        
        if (configTema.cor_primaria === tema.config.corPrimaria) {
          console.log(`  ‚úÖ Cor confirmada: ${configTema.cor_primaria}`);
        } else {
          console.log(`  ‚ö†Ô∏è Cor n√£o confirmada. Esperado: ${tema.config.corPrimaria}, Atual: ${configTema.cor_primaria}`);
        }
        
      } else {
        const erro = await temaResponse.json();
        console.log(`  ‚ùå Erro ao aplicar ${tema.nome}:`, erro.error);
      }
      
      // Aguardar entre aplica√ß√µes
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // 5. Criar or√ßamento de teste
    console.log('\n5. üìÑ Criando or√ßamento de teste...');
    
    const orcamentoTeste = {
      numero: `TESTE-VISUAL-${Date.now()}`,
      cliente_id: '1',
      data_orcamento: new Date().toISOString().split('T')[0],
      descricao: 'Or√ßamento para teste visual de personaliza√ß√£o',
      observacoes: 'Este or√ßamento deve refletir as configura√ß√µes de personaliza√ß√£o aplicadas',
      modalidade: 'DIRETA',
      itens: [
        {
          descricao: 'Produto Premium A',
          quantidade: 2,
          valor_unitario: 250.00
        },
        {
          descricao: 'Servi√ßo Especializado B',
          quantidade: 3,
          valor_unitario: 180.00
        },
        {
          descricao: 'Material de Apoio C',
          quantidade: 5,
          valor_unitario: 45.00
        }
      ]
    };
    
    const orcamentoResponse = await fetch('http://localhost:3145/api/orcamentos', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(orcamentoTeste)
    });
    
    if (orcamentoResponse.ok) {
      const orcamentoCriado = await orcamentoResponse.json();
      console.log('‚úÖ Or√ßamento de teste criado:', orcamentoCriado.numero);
      console.log('üí∞ Valor total:', orcamentoCriado.valor_total || 'Calculando...');
    } else {
      const erro = await orcamentoResponse.json();
      console.log('‚ùå Erro ao criar or√ßamento:', erro.error);
    }
    
    // 6. Restaurar configura√ß√£o de teste final
    console.log('\n6. üîÑ Aplicando configura√ß√£o final para teste...');
    
    const configFinal = {
      corPrimaria: '#dc2626',      // Vermelho para destaque
      corSecundaria: '#b91c1c',
      corTexto: '#1f2937',
      fonteTitulo: 'Inter',
      fonteTexto: 'Inter',
      tamanhoTitulo: 26,
      tamanhoTexto: 14,
      validadeOrcamento: 45
    };
    
    const finalResponse = await fetch('http://localhost:3145/api/config', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(configFinal)
    });
    
    if (finalResponse.ok) {
      console.log('‚úÖ Configura√ß√£o final aplicada (tema vermelho)');
    }
    
    // 7. Resumo final
    console.log('\n' + '=' .repeat(60));
    console.log('üìä RESUMO DO TESTE DE PERSONALIZA√á√ÉO');
    console.log('=' .repeat(60));
    console.log('‚úÖ Verifica√ß√£o de configura√ß√£o atual: CONCLU√çDO');
    console.log('‚úÖ Salvamento de configura√ß√µes: CONCLU√çDO');
    console.log('‚úÖ Verifica√ß√£o de campos salvos: CONCLU√çDO');
    console.log('‚úÖ Teste de diferentes temas: CONCLU√çDO');
    console.log('‚úÖ Cria√ß√£o de or√ßamento de teste: CONCLU√çDO');
    console.log('‚úÖ Aplica√ß√£o de configura√ß√£o final: CONCLU√çDO');
    
    console.log('\nüéØ TESTE VISUAL NECESS√ÅRIO:');
    console.log('1. Acesse: http://localhost:3145');
    console.log('2. V√° para "Configura√ß√µes" e verifique a aba "Personaliza√ß√£o"');
    console.log('3. V√° para "Or√ßamentos" e localize o or√ßamento criado');
    console.log('4. Clique em "Baixar PDF" ou "Visualizar"');
    console.log('5. Verifique se o PDF cont√©m:');
    console.log('   ‚Ä¢ Cor prim√°ria vermelha (#dc2626)');
    console.log('   ‚Ä¢ Fonte Inter nos t√≠tulos');
    console.log('   ‚Ä¢ Tamanho de t√≠tulo 26px');
    console.log('   ‚Ä¢ Validade de 45 dias');
    
    console.log('\nüìã CAMPOS TESTADOS:');
    console.log('‚Ä¢ cor_primaria ‚úÖ');
    console.log('‚Ä¢ cor_secundaria ‚úÖ');
    console.log('‚Ä¢ cor_texto ‚úÖ');
    console.log('‚Ä¢ fonte_titulo ‚úÖ');
    console.log('‚Ä¢ fonte_texto ‚úÖ');
    console.log('‚Ä¢ tamanho_titulo ‚úÖ');
    console.log('‚Ä¢ tamanho_texto ‚úÖ');
    console.log('‚Ä¢ validade_orcamento ‚úÖ');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    console.log('üí° Certifique-se de que o servidor est√° rodando em http://localhost:3145');
  }
}

// Executar o teste
testarPersonalizacaoCorrigida();