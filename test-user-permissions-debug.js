// Teste de Permiss√µes do Usu√°rio - Execute no Console do Navegador
// Copie e cole este c√≥digo no console do navegador (F12)

console.log('=== TESTE DE PERMISS√ïES DO USU√ÅRIO ===');

// Fun√ß√£o para testar permiss√µes
function testUserPermissions() {
    console.log('\n1. Verificando dados de autentica√ß√£o...');
    
    // Verificar localStorage
    const authToken = localStorage.getItem('auth_token');
    console.log('Token no localStorage:', authToken ? 'Presente' : 'Ausente');
    
    if (authToken) {
        try {
            // Decodificar token
            const payload = JSON.parse(atob(authToken.split('.')[1]));
            console.log('Dados do token:', {
                userId: payload.userId,
                email: payload.email,
                role: payload.role,
                exp: new Date(payload.exp * 1000).toLocaleString()
            });
        } catch (error) {
            console.error('Erro ao decodificar token:', error);
        }
    }
    
    console.log('\n2. Verificando contexto de autentica√ß√£o...');
    
    // Verificar se h√° dados do usu√°rio no contexto React
    const authData = window.localStorage.getItem('auth_user_data');
    if (authData) {
        try {
            const userData = JSON.parse(authData);
            console.log('Dados do usu√°rio:', userData);
        } catch (error) {
            console.error('Erro ao parsear dados do usu√°rio:', error);
        }
    }
    
    console.log('\n3. Verificando elementos da interface...');
    
    // Verificar se o usu√°rio est√° logado na interface
    const userInfo = document.querySelector('[data-testid="user-info"]') || 
                    document.querySelector('.user-info') ||
                    document.querySelector('[class*="user"]');
    
    if (userInfo) {
        console.log('Informa√ß√µes do usu√°rio na interface:', userInfo.textContent);
    } else {
        console.log('Elemento de informa√ß√µes do usu√°rio n√£o encontrado');
    }
    
    console.log('\n4. Verificando link de or√ßamentos...');
    
    // Procurar pelo link de or√ßamentos
    const orcamentosLink = document.querySelector('a[href="/orcamentos"]') ||
                          document.querySelector('a[href*="orcamento"]') ||
                          document.querySelector('[data-testid="orcamentos-link"]');
    
    if (orcamentosLink) {
        console.log('Link de or√ßamentos encontrado:', {
            href: orcamentosLink.href,
            text: orcamentosLink.textContent,
            visible: orcamentosLink.offsetParent !== null,
            disabled: orcamentosLink.hasAttribute('disabled') || orcamentosLink.classList.contains('disabled')
        });
        
        // Verificar se o link est√° vis√≠vel
        const rect = orcamentosLink.getBoundingClientRect();
        console.log('Posi√ß√£o do link:', {
            top: rect.top,
            left: rect.left,
            width: rect.width,
            height: rect.height,
            visibleInViewport: rect.top >= 0 && rect.left >= 0 && rect.bottom <= window.innerHeight && rect.right <= window.innerWidth
        });
    } else {
        console.log('‚ùå Link de or√ßamentos N√ÉO encontrado');
        
        // Listar todos os links de navega√ß√£o dispon√≠veis
        const allNavLinks = document.querySelectorAll('nav a, [role="navigation"] a, .navigation a');
        console.log('Links de navega√ß√£o dispon√≠veis:');
        allNavLinks.forEach((link, index) => {
            console.log(`  ${index + 1}. ${link.textContent.trim()} -> ${link.href}`);
        });
    }
    
    console.log('\n5. Verificando permiss√µes no contexto React...');
    
    // Tentar acessar o contexto React (se dispon√≠vel)
    try {
        // Procurar por elementos React com dados de permiss√£o
        const reactElements = document.querySelectorAll('[data-reactroot], [data-react-helmet]');
        console.log('Elementos React encontrados:', reactElements.length);
        
        // Verificar se h√° dados de permiss√£o em atributos data-*
        const elementsWithPermissions = document.querySelectorAll('[data-permission], [data-role], [data-user]');
        if (elementsWithPermissions.length > 0) {
            console.log('Elementos com dados de permiss√£o:');
            elementsWithPermissions.forEach((el, index) => {
                console.log(`  ${index + 1}.`, {
                    tag: el.tagName,
                    permission: el.dataset.permission,
                    role: el.dataset.role,
                    user: el.dataset.user
                });
            });
        }
    } catch (error) {
        console.error('Erro ao verificar contexto React:', error);
    }
    
    console.log('\n6. Fazendo requisi√ß√£o para verificar permiss√µes...');
    
    // Fazer uma requisi√ß√£o para verificar as permiss√µes do usu√°rio atual
    if (authToken) {
        fetch('/api/auth/verify', {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        })
        .then(response => response.json())
        .then(data => {
            console.log('Resposta da verifica√ß√£o de autentica√ß√£o:', data);
            
            if (data.usuario) {
                console.log('Dados do usu√°rio:', {
                    id: data.usuario.id,
                    nome: data.usuario.nome,
                    email: data.usuario.email,
                    role: data.usuario.role,
                    ativo: data.usuario.ativo,
                    permissoes: data.usuario.permissoes
                });
                
                // Verificar especificamente a permiss√£o de or√ßamentos
                const hasOrcamentosPermission = data.usuario.role === 'admin' || 
                                              (data.usuario.permissoes && data.usuario.permissoes.orcamentos === true);
                
                console.log('\nüîç AN√ÅLISE DE PERMISS√ïES:');
                console.log('√â admin?', data.usuario.role === 'admin');
                console.log('Tem permiss√£o de or√ßamentos?', data.usuario.permissoes?.orcamentos);
                console.log('Deveria ver o link de or√ßamentos?', hasOrcamentosPermission);
                
                if (hasOrcamentosPermission && !orcamentosLink) {
                    console.log('‚ùå PROBLEMA: Usu√°rio tem permiss√£o mas o link n√£o est√° vis√≠vel!');
                } else if (!hasOrcamentosPermission && orcamentosLink) {
                    console.log('‚ùå PROBLEMA: Usu√°rio n√£o tem permiss√£o mas o link est√° vis√≠vel!');
                } else if (hasOrcamentosPermission && orcamentosLink) {
                    console.log('‚úÖ OK: Usu√°rio tem permiss√£o e o link est√° vis√≠vel');
                } else {
                    console.log('‚úÖ OK: Usu√°rio n√£o tem permiss√£o e o link n√£o est√° vis√≠vel');
                }
            }
        })
        .catch(error => {
            console.error('Erro na verifica√ß√£o de autentica√ß√£o:', error);
        });
    }
    
    console.log('\n=== FIM DO TESTE ===');
}

// Disponibilizar fun√ß√£o globalmente
window.testUserPermissions = testUserPermissions;

console.log('Fun√ß√£o testUserPermissions() dispon√≠vel. Execute testUserPermissions() para iniciar o teste.');
console.log('Ou execute automaticamente em 2 segundos...');

// Executar automaticamente ap√≥s 2 segundos
setTimeout(testUserPermissions, 2000);