const { chromium } = require('playwright');

async function testPriceValidation() {
  console.log('üß™ Testando valida√ß√£o de pre√ßos negativos...');
  
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();
  
  try {
    // Navegar para a p√°gina inicial
    console.log('üìç Navegando para http://localhost:3145');
    await page.goto('http://localhost:3145', { waitUntil: 'networkidle' });
    
    // Fazer login
    console.log('üîê Fazendo login...');
    await page.fill('input[type="email"]', 'admin@sistema.com');
    await page.fill('input[type="password"]', 'admin123');
    await page.click('button[type="submit"]');
    
    // Aguardar redirecionamento ap√≥s login
    await page.waitForURL('http://localhost:3145/', { timeout: 10000 });
    console.log('‚úÖ Login realizado com sucesso');
    
    // Navegar para produtos
    console.log('üîç Navegando para produtos...');
    const produtosLink = await page.locator('a[href="/produtos"]').first();
    await produtosLink.click();
    await page.waitForURL('http://localhost:3145/produtos', { timeout: 10000 });
    console.log('‚úÖ Navega√ß√£o para produtos bem-sucedida');
    
    // Clicar no bot√£o "Adicionar produto"
    console.log('‚ûï Clicando em Adicionar produto...');
    const novoProdutoBtn = await page.locator('button:has-text("Adicionar produto")').first();
    await novoProdutoBtn.click();
    await page.waitForTimeout(2000);
    console.log('‚úÖ Modal de novo produto aberto');
    
    // Preencher dados b√°sicos do produto
    console.log('üìù Preenchendo dados do produto...');
    await page.fill('input[placeholder="Ex.: Vela arom√°tica"]', 'Produto Teste Pre√ßo');
    await page.fill('input[placeholder="Unit√°rio, Caixa, etc."]', 'Unit√°rio');
    
    // Tentar inserir pre√ßo negativo
    console.log('üí∞ Tentando inserir pre√ßo negativo (-50)...');
    const precoInput = await page.locator('input').nth(4); // Campo de pre√ßo de venda
    await precoInput.click();
    await precoInput.fill('-50');
    
    // Verificar se o valor foi aceito
    await page.waitForTimeout(1000);
    const precoValue = await precoInput.inputValue();
    console.log('üí∞ Valor no campo de pre√ßo:', precoValue);
    
    if (precoValue === '' || precoValue === '0,00' || !precoValue.includes('-')) {
      console.log('‚úÖ TESTE PASSOU - Pre√ßo negativo foi rejeitado');
      
      // Testar com valor positivo para confirmar que funciona
      console.log('üí∞ Testando com pre√ßo positivo (50)...');
      await precoInput.fill('50');
      await page.waitForTimeout(1000);
      const precoPositivo = await precoInput.inputValue();
      console.log('üí∞ Valor positivo no campo:', precoPositivo);
      
      if (precoPositivo && precoPositivo !== '0,00') {
        console.log('‚úÖ Pre√ßo positivo aceito corretamente');
        
        // Testar campo de custo tamb√©m
        console.log('üí∞ Testando custo negativo...');
        const custoInput = await page.locator('input').nth(5); // Campo de custo
        await custoInput.click();
        await custoInput.fill('-30');
        await page.waitForTimeout(1000);
        const custoValue = await custoInput.inputValue();
        console.log('üí∞ Valor no campo de custo:', custoValue);
        
        if (custoValue === '' || custoValue === '0,00' || !custoValue.includes('-')) {
          console.log('‚úÖ TESTE PASSOU COMPLETAMENTE - Valida√ß√£o de pre√ßos negativos funcionando');
        } else {
          console.log('‚ùå TESTE FALHOU - Custo negativo foi aceito:', custoValue);
        }
      } else {
        console.log('‚ùå TESTE FALHOU - Pre√ßo positivo n√£o foi aceito');
      }
    } else {
      console.log('‚ùå TESTE FALHOU - Pre√ßo negativo foi aceito:', precoValue);
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    console.log('‚ùå TESTE FALHOU - Erro de execu√ß√£o');
  } finally {
    await browser.close();
  }
}

testPriceValidation();