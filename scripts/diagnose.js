const fs = require('fs')
const path = require('path')
const os = require('os')

function diagnoseSystem() {
  console.log('üîç Diagn√≥stico do Sistema ERP-BR\n')
  console.log('=' .repeat(50))
  
  // 1. Informa√ß√µes do sistema
  console.log('\nüìä INFORMA√á√ïES DO SISTEMA:')
  console.log(`‚úÖ Node.js: ${process.version}`)
  console.log(`‚úÖ Plataforma: ${os.platform()} ${os.arch()}`)
  console.log(`‚úÖ Diret√≥rio atual: ${process.cwd()}`)
  console.log(`‚úÖ Usu√°rio: ${os.userInfo().username}`)
  
  // 2. Verificar vari√°veis de ambiente
  console.log('\nüîß VARI√ÅVEIS DE AMBIENTE:')
  console.log(`DB_PATH: ${process.env.DB_PATH || 'n√£o definido (usando padr√£o)'}`)
  console.log(`NODE_ENV: ${process.env.NODE_ENV || 'n√£o definido'}`)
  console.log(`PORT: ${process.env.PORT || '3145 (padr√£o)'}`)
  
  // 3. Verificar caminho do banco
  const dbPath = process.env.DB_PATH || path.join(process.cwd(), '..', 'Banco de dados Aqui', 'erp.sqlite')
  console.log('\nüíæ BANCO DE DADOS:')
  console.log(`üìÅ Caminho do banco: ${dbPath}`)
  
  // 4. Verificar diret√≥rio e permiss√µes
  const dir = path.dirname(dbPath)
  console.log(`üìÅ Diret√≥rio do banco: ${dir}`)
  
  try {
    // Verificar se diret√≥rio existe
    if (!fs.existsSync(dir)) {
      console.log(`‚ö†Ô∏è  Diret√≥rio n√£o existe, tentando criar...`)
      fs.mkdirSync(dir, { recursive: true })
      console.log(`‚úÖ Diret√≥rio criado: ${dir}`)
    } else {
      console.log(`‚úÖ Diret√≥rio existe: ${dir}`)
    }
    
    // Verificar permiss√µes de escrita
    const testFile = path.join(dir, '.test-write-permission')
    fs.writeFileSync(testFile, 'test de permiss√£o')
    fs.unlinkSync(testFile)
    console.log('‚úÖ Permiss√µes de escrita: OK')
    
    // Verificar se banco existe
    if (fs.existsSync(dbPath)) {
      const stats = fs.statSync(dbPath)
      console.log(`‚úÖ Arquivo do banco existe (${(stats.size / 1024).toFixed(2)} KB)`)
    } else {
      console.log(`‚ö†Ô∏è  Arquivo do banco n√£o existe (ser√° criado na primeira execu√ß√£o)`)
    }
    
  } catch (error) {
    console.log(`‚ùå Erro de permiss√µes: ${error.message}`)
    console.log('\nüîß POSS√çVEIS SOLU√á√ïES:')
    console.log('1. Execute como administrador')
    console.log('2. Verifique permiss√µes da pasta')
    console.log('3. Use uma pasta diferente com DB_PATH')
    return false
  }
  
  // 5. Testar conex√£o com banco (se better-sqlite3 estiver dispon√≠vel)
  try {
    const Database = require('better-sqlite3')
    console.log('\nüîå TESTE DE CONEX√ÉO:')
    
    const db = new Database(dbPath)
    console.log('‚úÖ Conex√£o com banco: OK')
    
    // Testar opera√ß√µes b√°sicas
    db.exec('CREATE TABLE IF NOT EXISTS test_diagnose (id INTEGER PRIMARY KEY, data TEXT)')
    const insert = db.prepare('INSERT INTO test_diagnose (data) VALUES (?)')
    const result = insert.run('teste de diagn√≥stico')
    console.log(`‚úÖ Inser√ß√£o de dados: OK (ID: ${result.lastInsertRowid})`)
    
    const select = db.prepare('SELECT * FROM test_diagnose WHERE id = ?')
    const row = select.get(result.lastInsertRowid)
    console.log(`‚úÖ Leitura de dados: OK (${row.data})`)
    
    // Limpar teste
    db.exec('DROP TABLE test_diagnose')
    db.close()
    console.log('‚úÖ Limpeza e fechamento: OK')
    
  } catch (error) {
    console.log(`‚ùå Erro de conex√£o com banco: ${error.message}`)
    console.log('\nüîß POSS√çVEIS SOLU√á√ïES:')
    console.log('1. Instale as depend√™ncias: npm install')
    console.log('2. Verifique se better-sqlite3 est√° instalado')
    console.log('3. Recompile m√≥dulos nativos: npm rebuild')
    return false
  }
  
  // 6. Verificar arquivos importantes
  console.log('\nüìÑ ARQUIVOS DO PROJETO:')
  const importantFiles = [
    'package.json',
    'next.config.mjs',
    'lib/db.ts',
    'middleware.ts',
    '.env.local'
  ]
  
  importantFiles.forEach(file => {
    const filePath = path.join(process.cwd(), file)
    if (fs.existsSync(filePath)) {
      console.log(`‚úÖ ${file}: existe`)
    } else {
      console.log(`‚ö†Ô∏è  ${file}: n√£o encontrado`)
    }
  })
  
  // 7. Verificar portas
  console.log('\nüåê CONFIGURA√á√ÉO DE REDE:')
  const port = process.env.PORT || 3145
  console.log(`‚úÖ Porta configurada: ${port}`)
  console.log(`‚úÖ URL local: http://localhost:${port}`)
  
  // Tentar detectar IP da m√°quina
  const networkInterfaces = os.networkInterfaces()
  console.log('\nüîó IPs DISPON√çVEIS:')
  Object.keys(networkInterfaces).forEach(interfaceName => {
    const interfaces = networkInterfaces[interfaceName]
    interfaces.forEach(iface => {
      if (iface.family === 'IPv4' && !iface.internal) {
        console.log(`‚úÖ ${interfaceName}: http://${iface.address}:${port}`)
      }
    })
  })
  
  console.log('\n' + '=' .repeat(50))
  console.log('üéâ DIAGN√ìSTICO CONCLU√çDO!')
  console.log('\nüìã RESUMO:')
  console.log('‚úÖ Sistema operacional: OK')
  console.log('‚úÖ Node.js: OK')
  console.log('‚úÖ Permiss√µes de arquivo: OK')
  console.log('‚úÖ Banco de dados: OK')
  console.log('\nüöÄ O sistema est√° pronto para uso!')
  
  return true
}

// Fun√ß√£o para mostrar ajuda
function showHelp() {
  console.log('\nüÜò AJUDA - Script de Diagn√≥stico ERP-BR')
  console.log('\nUso:')
  console.log('  node scripts/diagnose.js          - Executar diagn√≥stico completo')
  console.log('  node scripts/diagnose.js --help   - Mostrar esta ajuda')
  console.log('\nO que este script verifica:')
  console.log('‚Ä¢ Vers√£o do Node.js e informa√ß√µes do sistema')
  console.log('‚Ä¢ Vari√°veis de ambiente importantes')
  console.log('‚Ä¢ Permiss√µes de arquivo e diret√≥rio')
  console.log('‚Ä¢ Conectividade com banco de dados SQLite')
  console.log('‚Ä¢ Arquivos importantes do projeto')
  console.log('‚Ä¢ Configura√ß√£o de rede e IPs dispon√≠veis')
  console.log('\nEm caso de problemas:')
  console.log('1. Execute como administrador')
  console.log('2. Verifique se todas as depend√™ncias est√£o instaladas')
  console.log('3. Configure DB_PATH se necess√°rio')
}

// Executar diagn√≥stico se chamado diretamente
if (require.main === module) {
  const args = process.argv.slice(2)
  
  if (args.includes('--help') || args.includes('-h')) {
    showHelp()
  } else {
    try {
      diagnoseSystem()
    } catch (error) {
      console.error('‚ùå Erro durante diagn√≥stico:', error.message)
      process.exit(1)
    }
  }
}

module.exports = { diagnoseSystem, showHelp }