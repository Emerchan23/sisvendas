// Teste visual final para gera√ß√£o de PDF personalizado
// Execute com: node test-pdf-visual.js

const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

async function testarPDFVisual() {
  console.log('üìÑ TESTE VISUAL: Gera√ß√£o de PDF Personalizado');
  console.log('=' .repeat(60));
  
  try {
    // 1. Buscar or√ßamentos existentes
    console.log('\n1. üîç Buscando or√ßamentos para teste...');
    
    const orcamentosResponse = await fetch('http://localhost:3145/api/orcamentos');
    const orcamentos = await orcamentosResponse.json();
    
    console.log(`üìã Encontrados ${orcamentos.length} or√ßamentos`);
    
    if (orcamentos.length === 0) {
      console.log('‚ö†Ô∏è Nenhum or√ßamento encontrado. Criando um novo...');
      
      // Criar or√ßamento de teste
      const novoOrcamento = {
        numero: `PDF-TEST-${Date.now()}`,
        cliente_id: '1',
        data_orcamento: new Date().toISOString().split('T')[0],
        descricao: 'Or√ßamento para teste de PDF personalizado',
        observacoes: 'Este PDF deve mostrar todas as personaliza√ß√µes aplicadas: cores, fontes, layout e branding.',
        modalidade: 'DIRETA',
        itens: [
          {
            descricao: 'Desenvolvimento de Sistema Web',
            quantidade: 1,
            valor_unitario: 5000.00
          },
          {
            descricao: 'Consultoria T√©cnica (40h)',
            quantidade: 40,
            valor_unitario: 150.00
          },
          {
            descricao: 'Treinamento da Equipe',
            quantidade: 2,
            valor_unitario: 800.00
          },
          {
            descricao: 'Suporte T√©cnico (6 meses)',
            quantidade: 6,
            valor_unitario: 300.00
          }
        ]
      };
      
      const criarResponse = await fetch('http://localhost:3145/api/orcamentos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(novoOrcamento)
      });
      
      if (criarResponse.ok) {
        const orcamentoCriado = await criarResponse.json();
        console.log('‚úÖ Or√ßamento criado:', orcamentoCriado.numero);
        console.log('üí∞ Valor total:', orcamentoCriado.valor_total);
        orcamentos.push(orcamentoCriado);
      } else {
        console.log('‚ùå Erro ao criar or√ßamento');
        return;
      }
    }
    
    // 2. Selecionar or√ßamento para teste
    const orcamentoTeste = orcamentos[orcamentos.length - 1]; // Pegar o mais recente
    console.log(`\n2. üìÑ Testando com or√ßamento: ${orcamentoTeste.numero}`);
    console.log(`   üí∞ Valor: R$ ${orcamentoTeste.valor_total || 'N/A'}`);
    console.log(`   üìÖ Data: ${orcamentoTeste.data_orcamento}`);
    
    // 3. Verificar configura√ß√µes atuais
    console.log('\n3. ‚öôÔ∏è Verificando configura√ß√µes de personaliza√ß√£o...');
    
    const configResponse = await fetch('http://localhost:3145/api/config');
    const config = await configResponse.json();
    
    console.log('üé® Configura√ß√µes ativas:');
    console.log(`   ‚Ä¢ Cor prim√°ria: ${config.cor_primaria || 'Padr√£o'}`);
    console.log(`   ‚Ä¢ Cor secund√°ria: ${config.cor_secundaria || 'Padr√£o'}`);
    console.log(`   ‚Ä¢ Fonte t√≠tulo: ${config.fonte_titulo || 'Padr√£o'}`);
    console.log(`   ‚Ä¢ Tamanho t√≠tulo: ${config.tamanho_titulo || 'Padr√£o'}px`);
    console.log(`   ‚Ä¢ Fonte texto: ${config.fonte_texto || 'Padr√£o'}`);
    console.log(`   ‚Ä¢ Tamanho texto: ${config.tamanho_texto || 'Padr√£o'}px`);
    console.log(`   ‚Ä¢ Validade: ${config.validade_orcamento || 'Padr√£o'} dias`);
    
    // 4. Testar gera√ß√£o de PDF
    console.log('\n4. üìÑ Testando gera√ß√£o de PDF...');
    
    const pdfResponse = await fetch(`http://localhost:3145/api/orcamentos/${orcamentoTeste.id}/pdf`, {
      method: 'GET'
    });
    
    if (pdfResponse.ok) {
      console.log('‚úÖ PDF gerado com sucesso!');
      console.log(`üìä Tamanho: ${pdfResponse.headers.get('content-length')} bytes`);
      console.log(`üìã Tipo: ${pdfResponse.headers.get('content-type')}`);
      
      // Salvar PDF para inspe√ß√£o
      const pdfBuffer = await pdfResponse.buffer();
      const pdfPath = path.join(__dirname, `orcamento-${orcamentoTeste.numero}-personalizado.pdf`);
      
      fs.writeFileSync(pdfPath, pdfBuffer);
      console.log(`üíæ PDF salvo em: ${pdfPath}`);
      
    } else {
      const erro = await pdfResponse.text();
      console.log('‚ùå Erro ao gerar PDF:', erro);
    }
    
    // 5. Testar diferentes configura√ß√µes de personaliza√ß√£o
    console.log('\n5. üé® Testando varia√ß√µes de personaliza√ß√£o...');
    
    const variacoes = [
      {
        nome: 'Tema Corporativo Azul',
        config: {
          corPrimaria: '#1e3a8a',
          corSecundaria: '#1e40af',
          fonteTitulo: 'Arial',
          tamanhoTitulo: 28,
          fonteTexto: 'Arial',
          tamanhoTexto: 12
        }
      },
      {
        nome: 'Tema Moderno Verde',
        config: {
          corPrimaria: '#065f46',
          corSecundaria: '#047857',
          fonteTitulo: 'Helvetica',
          tamanhoTitulo: 24,
          fonteTexto: 'Helvetica',
          tamanhoTexto: 13
        }
      },
      {
        nome: 'Tema Elegante Roxo',
        config: {
          corPrimaria: '#581c87',
          corSecundaria: '#6b21a8',
          fonteTitulo: 'Georgia',
          tamanhoTitulo: 26,
          fonteTexto: 'Georgia',
          tamanhoTexto: 14
        }
      }
    ];
    
    for (let i = 0; i < variacoes.length; i++) {
      const variacao = variacoes[i];
      console.log(`\n   üé® Aplicando: ${variacao.nome}`);
      
      // Aplicar configura√ß√£o
      const aplicarResponse = await fetch('http://localhost:3145/api/config', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(variacao.config)
      });
      
      if (aplicarResponse.ok) {
        console.log(`   ‚úÖ ${variacao.nome} aplicado`);
        
        // Gerar PDF com nova configura√ß√£o
        const pdfVariacaoResponse = await fetch(`http://localhost:3145/api/orcamentos/${orcamentoTeste.id}/pdf`);
        
        if (pdfVariacaoResponse.ok) {
          const pdfVariacaoBuffer = await pdfVariacaoResponse.buffer();
          const pdfVariacaoPath = path.join(__dirname, `orcamento-${orcamentoTeste.numero}-tema-${i + 1}.pdf`);
          
          fs.writeFileSync(pdfVariacaoPath, pdfVariacaoBuffer);
          console.log(`   üíæ PDF tema ${i + 1} salvo: ${pdfVariacaoPath}`);
        } else {
          console.log(`   ‚ùå Erro ao gerar PDF para ${variacao.nome}`);
        }
        
      } else {
        console.log(`   ‚ùå Erro ao aplicar ${variacao.nome}`);
      }
      
      // Aguardar entre aplica√ß√µes
      await new Promise(resolve => setTimeout(resolve, 1500));
    }
    
    // 6. Restaurar configura√ß√£o original
    console.log('\n6. üîÑ Restaurando configura√ß√£o original...');
    
    const configOriginal = {
      corPrimaria: '#dc2626',
      corSecundaria: '#b91c1c',
      corTexto: '#1f2937',
      fonteTitulo: 'Inter',
      fonteTexto: 'Inter',
      tamanhoTitulo: 26,
      tamanhoTexto: 14,
      validadeOrcamento: 45
    };
    
    const restaurarResponse = await fetch('http://localhost:3145/api/config', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(configOriginal)
    });
    
    if (restaurarResponse.ok) {
      console.log('‚úÖ Configura√ß√£o original restaurada');
    }
    
    // 7. Resumo final
    console.log('\n' + '=' .repeat(60));
    console.log('üìä RESUMO DO TESTE VISUAL DE PDF');
    console.log('=' .repeat(60));
    console.log('‚úÖ Busca de or√ßamentos: CONCLU√çDO');
    console.log('‚úÖ Verifica√ß√£o de configura√ß√µes: CONCLU√çDO');
    console.log('‚úÖ Gera√ß√£o de PDF principal: CONCLU√çDO');
    console.log('‚úÖ Teste de varia√ß√µes de tema: CONCLU√çDO');
    console.log('‚úÖ Restaura√ß√£o de configura√ß√£o: CONCLU√çDO');
    
    console.log('\nüìÅ ARQUIVOS GERADOS:');
    console.log(`‚Ä¢ orcamento-${orcamentoTeste.numero}-personalizado.pdf (tema original)`);
    console.log('‚Ä¢ orcamento-*-tema-1.pdf (tema azul corporativo)');
    console.log('‚Ä¢ orcamento-*-tema-2.pdf (tema verde moderno)');
    console.log('‚Ä¢ orcamento-*-tema-3.pdf (tema roxo elegante)');
    
    console.log('\nüîç VERIFICA√á√ïES VISUAIS NECESS√ÅRIAS:');
    console.log('1. Abra os PDFs gerados e compare:');
    console.log('   ‚Ä¢ Cores dos cabe√ßalhos e elementos');
    console.log('   ‚Ä¢ Fontes utilizadas nos t√≠tulos e textos');
    console.log('   ‚Ä¢ Tamanhos de fonte aplicados');
    console.log('   ‚Ä¢ Layout geral e espa√ßamento');
    console.log('   ‚Ä¢ Branding e identidade visual');
    
    console.log('\n2. Acesse a interface web:');
    console.log('   ‚Ä¢ http://localhost:3145/configuracoes');
    console.log('   ‚Ä¢ Verifique a aba "Personaliza√ß√£o"');
    console.log('   ‚Ä¢ Teste mudan√ßas em tempo real');
    
    console.log('\n3. Teste gera√ß√£o via interface:');
    console.log('   ‚Ä¢ V√° para "Or√ßamentos"');
    console.log('   ‚Ä¢ Localize o or√ßamento de teste');
    console.log('   ‚Ä¢ Clique em "Baixar PDF"');
    console.log('   ‚Ä¢ Compare com os PDFs gerados automaticamente');
    
    console.log('\nüéØ FUNCIONALIDADES TESTADAS:');
    console.log('‚Ä¢ ‚úÖ Salvamento de configura√ß√µes de personaliza√ß√£o');
    console.log('‚Ä¢ ‚úÖ Aplica√ß√£o de cores personalizadas');
    console.log('‚Ä¢ ‚úÖ Configura√ß√£o de fontes customizadas');
    console.log('‚Ä¢ ‚úÖ Ajuste de tamanhos de fonte');
    console.log('‚Ä¢ ‚úÖ Gera√ß√£o de PDF com personaliza√ß√µes');
    console.log('‚Ä¢ ‚úÖ Teste de m√∫ltiplos temas');
    console.log('‚Ä¢ ‚úÖ Persist√™ncia de configura√ß√µes');
    console.log('‚Ä¢ ‚úÖ API de configura√ß√£o funcionando');
    console.log('‚Ä¢ ‚úÖ Integra√ß√£o com gera√ß√£o de documentos');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    console.log('üí° Certifique-se de que o servidor est√° rodando em http://localhost:3145');
  }
}

// Executar o teste
testarPDFVisual();